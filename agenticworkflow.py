# -*- coding: utf-8 -*-
"""AgenticWorkflow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E-RkPq0koND65tVxRLRv8B8UgVHHLTXd
"""

!pip install langgraph langsmith

!pip install langchain langchain_groq langchain_community

!sudo apt-get update
!sudo apt-get install -y unixodbc-dev
!pip install pyodbc

!sudo apt-get update
!sudo apt --fix-broken install -y
!sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17

!pip install paddlepaddle -q
!pip install paddleocr -q
!pip install shapely -q

!pip install structlog -q

from google.colab import userdata
groq_api_key = userdata.get('groq_api_key')
print(groq_api_key)
LangSmith= userdata.get('LangSmith_api_key')
print(LangSmith)

from langchain_groq import ChatGroq

llm = ChatGroq(groq_api_key=groq_api_key,model_name="gemma2-9b-it")
llm

"""##Making an agent for document parser

"""

!pip install paddleocr

from typing import TypedDict
import tempfile,cv2
from paddle_aadhaar_ocr import PaddleImagePreprocessor
from datetime import datetime
from langgraph.graph import StateGraph

class PreprocessState(TypedDict, total=False):
    image_path: str
    processed_image: str
    timestamp: datetime
    error: str

class PreprocessNode(StateGraph[PreprocessState]):
    def __init__(self):
        super().__init__(PreprocessState)
        self.preprocessor = PaddleImagePreprocessor()

    def run(self, state: PreprocessState) -> PreprocessState:
        state['timestamp'] = datetime.utcnow()
        try:
            img = self.preprocessor.preprocess(state['image_path'])
            # Save a temp file for OCR
            tmp = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
            cv2.imwrite(tmp.name, cv2.cvtColor(img, cv2.COLOR_RGB2BGR))
            state['processed_image'] = tmp.name
        except Exception as e:
            state['error'] = str(e)
        return state

from typing import TypedDict, Any, List
from paddle_aadhaar_ocr import PaddleAadhaarOCR
from datetime import datetime

class OcrState(TypedDict, total=False):
    processed_image: str
    timestamp: datetime
    success: bool
    data: dict
    raw_text: str
    confidence_scores: List[float]
    error: str

class AadhaarOcrNode(StateGraph[OcrState]):
    def __init__(self):
        super().__init__(OcrState)
        self.ocr = PaddleAadhaarOCR(use_gpu=False)

    def run(self, state: OcrState) -> OcrState:
        state['timestamp'] = datetime.utcnow()
        try:
            res = self.ocr.process_image(state['processed_image'])
            state.update(
                {
                'success': res.get('success', False),
                'data': res.get('data', {}),
                'raw_text': res.get('raw_text', ''),
                'confidence_scores': res.get('confidence_scores', []),
                'error': res.get('error'),
            }
                )
        except Exception as e:
            state['success'] = False
            state['error'] = str(e)
        return state

import json

from langgraph.graph import StateGraph, START, END
import json
from datetime import datetime

class FullState(PreprocessState, OcrState):
    pass

graph = StateGraph(FullState)
graph.add_node("preprocess", PreprocessNode().run)
graph.add_node("ocr", AadhaarOcrNode().run)
graph.add_edge(START, "preprocess")
graph.add_edge("preprocess", "ocr")
graph.add_edge("ocr", END)

app = graph.compile()

result = app.invoke(
    {
     "image_path": "/content/image_1.jpg"
    })

# Convert datetime objects to strings for JSON serialization
def datetime_converter(o):
    if isinstance(o, datetime):
        return o.__str__()

print(json.dumps(result, indent=2, ensure_ascii=False, default=datetime_converter))
print(result)

from IPython.display import Image,display
try:
  display(Image(app.get_graph().draw_mermaid_png()))
except Exception:
  pass